% ===========================================================================
% Code for removal of old and uninformative samples (used only for time-varying case)
% ===========================================================================

% Force-remove samples according to age
% The last row of X_n is the sample index (which is currently tied with the
% iteration number at which it is sampled)
del_age_idx = (iter - X_n(XN_TSTMP,:) > T_oold);

if ~isempty(del_age_idx)
    % Clear entries associated with the 'too old' samples
    X_n(:,del_age_idx)         = [];
    T_n(:,del_age_idx)         = [];
    R_n(:,del_age_idx)         = [];
    db_samp(:, del_age_idx)    = [];
    db_samp_cn(:, del_age_idx) = [];
    X_n_len                    = size(X_n,2);
end

% Initialize empty list (to be populated by indices of samples to be removed)
samp_rem_idx    = [];

% Iterate over all existing samples (I dont do it for the latest sample)
for i = 1:X_n_len
    % All 'continue' statements inside this loop mean that the sample is not 
    % added to the ones to be deleted

    % If sample is too young
    if (iter - X_n(XN_TSTMP,i)) < T_old
        continue; 
    end

    % All compared samples j (samples which are not i)
    comp_idx    = true(1,X_n_len);
    comp_idx(i) = false;    
    % Distances of all samples j to sample i (used for the subsequent calculations of cone-related quantities)
    pt_dst = vecnorm(X_n(1:D, comp_idx) - repmat(X_n(1:D, i), 1, X_n_len-1));

    % If upper bound by the sample i is tighter than (<) the bounds produced 
    % by the other samples, DON'T DELETE IT
    if (X_n(XN_FVAL,i) + feps + T_n(2, i)) < ...
            min(X_n(XN_FVAL, comp_idx) + feps + fgam*pt_dst + T_n(2,comp_idx))
%           min(db_samp(SAMP_F_UB_VTX, i) + db_samp(SAMP_F_UB_HGT, i) + feps + T_n(2, X_n(end,:)==db_samp_cn(CDPTCN_LB,i)))
        continue;
    end
    % If lower bound by the sample i is tighter than (>) the bounds produced 
    % by the other samples, DON'T DELETE IT
    if (X_n(XN_FVAL,i) - feps - T_n(2, i)) > ...
            max(X_n(XN_FVAL, comp_idx) - feps - fgam*pt_dst - T_n(2,comp_idx))
%           max(db_samp(SAMP_F_LB_VTX, i) - db_samp(SAMP_F_LB_HGT, i) - feps - T_n(2, X_n(end,:)==db_samp_cn(CDPTCN_LB,i)))
        continue;
    end

    samp_rem = true;
    % Iterate over all constraints
    for g_i = 1:g_len
        XN_GVAL_I = XN_GVAL + g_i - 1;
        SAMP_G_I = SAMP_G_INFO + 4*(g_i-1);
        % TODO: I don't remember the purpose of these two lines below
%       child_cn_ub = (X_n(end,:)==db_samp_cn(2*g_i+CDPTCN_UB,i));                
%       child_cn_lb = (X_n(end,:)==db_samp_cn(2*g_i+CDPTCN_LB,i));

        % If upper bound by the sample i is tighter than (<) the bounds produced 
        % by the other samples, DON'T DELETE IT
        if (X_n(XN_GVAL_I,i) + geps(g_i) + T_n(2+g_i, i)) < ...
                min(X_n(XN_GVAL_I, comp_idx) + geps(g_i) + ggam(g_i)*pt_dst + T_n(2+g_i,comp_idx))
%               min(db_samp(SAMP_G_I + SAMP_G_UB_VTX, :) + db_samp(SAMP_G_I + SAMP_G_UB_HGT, :) + geps(g_i) + T_n(2+g_i, X_n(end,:)==db_samp_cn(2*g_i+CDPTCN_UB,i))))
            samp_rem = false;
        end
        
        % If lower bound by the sample i is tighter than (>) the bounds produced 
        % by the other samples, DON'T DELETE IT
        if (X_n(XN_GVAL_I,i) - geps(g_i) - T_n(2+g_i, i)) > ...
                max(X_n(XN_GVAL_I, comp_idx) - geps(g_i) - ggam(g_i)*pt_dst - T_n(2+g_i,comp_idx))
%               max(db_samp(SAMP_G_I + SAMP_G_LB_VTX, :) - db_samp(SAMP_G_I + SAMP_G_LB_HGT, :) - geps(g_i) - T_n(2+g_i, X_n(end,:)==db_samp_cn(2*g_i+CDPTCN_LB,i))))
            samp_rem = false;
        end
    end

    if samp_rem
        samp_rem_idx = [samp_rem_idx X_n(XN_ID,i)];
    end
end

% Remove all entries in X_n, db_samp, db_samp_cn
del_mdl_idx = ismember(X_n(XN_ID,:),samp_rem_idx);

X_lf_all = [X_lf_all [X_n(1:D,del_mdl_idx); iter - X_n(XN_TSTMP,del_mdl_idx)]];

if ~isempty(del_mdl_idx)
    % Clear entries associated with uninformative samples
    X_n(:,del_mdl_idx)         = [];
    T_n(:,del_mdl_idx)         = [];
    R_n(:,del_mdl_idx)         = [];
    db_samp(:, del_mdl_idx)    = [];
    db_samp_cn(:, del_mdl_idx) = [];
    X_n_len                    = size(X_n,2);
end

% Iterating over the samples to be removed
for i = 1:length(samp_rem_idx)
    % Selecting the sample ID from list of just-deleted samples list
    samp_rem_i = samp_rem_idx(i);

    % =====================================
    % Processing candidate points databases
    % =====================================
    
    % Vector recalc_ub (_lb) finds candidate points whose objective upper (lower) 
    % bound is generated by this just-removed sample identified by index samp_rem_i.
    % Naturally, we have to update the cone generator sample index at those 
    % candidate points, because the current ones are GONE.
    recalc_ub = find(db_cdpt_cn(CDPTCN_UB,:)==samp_rem_i);
    recalc_lb = find(db_cdpt_cn(CDPTCN_LB,:)==samp_rem_i);

    % Iterating over all selected "UB cone-generator-less" candidate points
    for j = 1:length(recalc_ub)
        pt_dst      = vecnorm(X_n(1:D, :) - repmat(db_cdpt(1:D, recalc_ub(j)), 1, X_n_len));
        f_ub_lookup = [X_n(XN_FVAL, :); fgam*pt_dst];
        [~, ub_idx] = min(f_ub_lookup(1, :) + f_ub_lookup(2, :) + T_n(2, :)); % Calculating individual upper bound values
        db_cdpt(CDPT_F_UB_VTX:CDPT_F_UB_HGT, recalc_ub(j)) = f_ub_lookup(1:2, ub_idx);
        db_cdpt_cn(CDPTCN_UB, recalc_ub(j)) = X_n(XN_ID, ub_idx);           % Populating with the index of the cone generator samples                 
    end
    % Iterating over all selected "LB cone-generator-less" candidate points
    for j = 1:length(recalc_lb)
        pt_dst      = vecnorm(X_n(1:D, :) - repmat(db_cdpt(1:D, recalc_lb(j)), 1, X_n_len));
        f_lb_lookup = [X_n(XN_FVAL, :); fgam*pt_dst];
        [~, lb_idx] = max(f_lb_lookup(1, :) - f_lb_lookup(2, :) - T_n(2, :)); % Calculating individual lower bound values
        db_cdpt(CDPT_F_LB_VTX:CDPT_F_LB_HGT, recalc_lb(j)) = f_lb_lookup(1:2, lb_idx);
        db_cdpt_cn(CDPTCN_LB, recalc_lb(j)) = X_n(XN_ID, lb_idx);           % Populating with the index of the cone generator samples
    end

    % Repeating the above operations, for each constraint
    for g_i = 1:g_len
        XN_GVAL_I = XN_GVAL + g_i - 1;
        CDPT_G_I      = CDPT_G_INFO + 6*(g_i-1);
        recalc_ub = find(db_cdpt_cn(2*g_i+CDPTCN_UB,:)==samp_rem_i);
        recalc_lb = find(db_cdpt_cn(2*g_i+CDPTCN_LB,:)==samp_rem_i);

        % Iterating over all selected "UB cone-generator-less" candidate points
        for j = 1:length(recalc_ub)
            pt_dst      = vecnorm(X_n(1:D, :) - repmat(db_cdpt(1:D, recalc_ub(j)), 1, X_n_len));
            f_ub_lookup = [X_n(XN_GVAL_I, :); ggam(g_i)*pt_dst];
            [~, ub_idx] = min(f_ub_lookup(1, :) + f_ub_lookup(2, :) + T_n(2, :)); % Calculating individual upper bound values
            db_cdpt(CDPT_G_I + (CDPT_G_UB_VTX:CDPT_G_UB_HGT), recalc_ub(j)) = f_ub_lookup(1:2, ub_idx);
            db_cdpt_cn(2*g_i+CDPTCN_UB, recalc_ub(j)) = X_n(XN_ID, ub_idx);     % Populating with the index of the cone generator samples                 
        end

        % Iterating over all selected "LB cone-generator-less" candidate points
        for j = 1:length(recalc_lb)
            pt_dst      = vecnorm(X_n(1:D, :) - repmat(db_cdpt(1:D, recalc_lb(j)), 1, X_n_len));
            f_lb_lookup = [X_n(XN_GVAL_I, :); ggam(g_i)*pt_dst];
            [~, lb_idx] = max(f_lb_lookup(1, :) - f_lb_lookup(2, :) - T_n(2, :)); % Calculating individual lower bound values
            db_cdpt(CDPT_G_I + (CDPT_G_LB_VTX:CDPT_G_LB_HGT), recalc_lb(j)) = f_lb_lookup(1:2, lb_idx);
            db_cdpt_cn(2*g_i+CDPTCN_LB, recalc_lb(j)) = X_n(XN_ID, lb_idx);     % Populating with the index of the cone generator samples
        end
    end

    % ============================
    % Processing samples databases
    % ============================

    recalc_ub = find(db_samp_cn(CDPTCN_UB,:)==samp_rem_i);
    recalc_lb = find(db_samp_cn(CDPTCN_LB,:)==samp_rem_i);
    for j = 1:length(recalc_ub)
        pt_dst = vecnorm(X_n(1:D, :) - repmat(db_samp(1:D, recalc_ub(j)), 1, X_n_len));
        f_ub_lookup = [X_n(XN_FVAL, :); fgam*pt_dst];
        [~, ub_idx] = min(f_ub_lookup(1, :) + f_ub_lookup(2, :) + T_n(2, :)); % Calculating individual upper bound values
        db_samp(SAMP_F_UB_VTX:SAMP_F_UB_HGT, recalc_ub(j)) = f_ub_lookup(1:2, ub_idx);
        db_samp_cn(CDPTCN_UB, recalc_ub(j)) = X_n(XN_ID, ub_idx);           % Populating with the index of the cone generator samples                 
    end
    for j = 1:length(recalc_lb)
        pt_dst = vecnorm(X_n(1:D, :) - repmat(db_samp(1:D, recalc_lb(j)), 1, X_n_len));
        f_lb_lookup = [X_n(XN_FVAL, :); fgam*pt_dst];
        [~, lb_idx] = max(f_lb_lookup(1, :) - f_lb_lookup(2, :) - T_n(2, :)); % Calculating individual lower bound values
        db_samp(SAMP_F_LB_VTX:SAMP_F_LB_HGT, recalc_lb(j)) = f_lb_lookup(1:2, lb_idx);
        db_samp_cn(CDPTCN_LB, recalc_lb(j)) = X_n(XN_ID, lb_idx);           % Populating with the index of the cone generator samples
    end
    for g_i = 1:g_len
        XN_GVAL_I = XN_GVAL + g_i - 1;
        SAMP_G_I = SAMP_G_INFO + 4*(g_i-1);
        recalc_ub = find(db_samp_cn(2*g_i+CDPTCN_UB,:)==samp_rem_i);
        recalc_lb = find(db_samp_cn(2*g_i+CDPTCN_LB,:)==samp_rem_i);
        for j = 1:length(recalc_ub)
            pt_dst = vecnorm(X_n(1:D, :) - repmat(db_samp(1:D, recalc_ub(j)), 1, X_n_len));
            f_ub_lookup = [X_n(XN_GVAL_I, :); ggam(g_i)*pt_dst];
            [~, ub_idx] = min(f_ub_lookup(1, :) + f_ub_lookup(2, :) + T_n(2, :)); % Calculating individual upper bound values
            db_samp(SAMP_G_I + (CDPT_G_UB_VTX:CDPT_G_UB_HGT), recalc_ub(j)) = f_ub_lookup(1:2, ub_idx);
            db_samp_cn(2*g_i+CDPTCN_UB, recalc_ub(j)) = X_n(XN_ID, ub_idx);     % Populating with the index of the cone generator samples                 
        end
        for j = 1:length(recalc_lb)
            pt_dst = vecnorm(X_n(1:D, :) - repmat(db_samp(1:D, recalc_lb(j)), 1, X_n_len));
            f_lb_lookup = [X_n(XN_GVAL_I, :); ggam(g_i)*pt_dst];
            [~, lb_idx] = max(f_lb_lookup(1, :) - f_lb_lookup(2, :) - T_n(2, :)); % Calculating individual lower bound values
            db_samp(SAMP_G_I + (CDPT_G_LB_VTX:CDPT_G_LB_HGT), recalc_lb(j)) = f_lb_lookup(1:2, lb_idx);
            db_samp_cn(2*g_i+CDPTCN_LB, recalc_lb(j)) = X_n(XN_ID, lb_idx);     % Populating with the index of the cone generator samples
        end
    end
end